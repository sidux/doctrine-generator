[comment]
/*******************************************************************************
 * UML to Doctrine generator
 * Based on https://github.com/AlixBa/doctrine-generator
 *
 * This is a MTL generator template
 * See: 
 * Language Reference: http://help.eclipse.org/juno/topic/org.eclipse.acceleo.doc/pages/reference/language.html?cp=5_3_0
 * Operations: http://help.eclipse.org/juno/topic/org.eclipse.acceleo.doc/pages/reference/operations.html?cp=5_3_2
 * Text production rules: http://help.eclipse.org/juno/topic/org.eclipse.acceleo.doc/pages/reference/textproductionrules.html?cp=5_3_5
 *
 *******************************************************************************
[/comment]
[module uml2doctrine('http://www.eclipse.org/uml2/4.0.0/UML')/]

[template public generate(c : Class) post (trim())]
[comment @main/]
[file (c.name.concat('.php'), false, 'UTF-8')]
[c.entityDocumentDeclaration()/]

[c.entityUse()/]

[c.entityDocumentation()/]
[c.entityDeclaration()/]
	[c.entityProperties()/]

	[c.entityAssociations()/]

	[c.entityConstruct()/]

	[c.entityPropertiesGetSet()/]

	[c.entityAssociationsAddRemoveGet()/]
}
[/file]

[file (c.name.concat('Repository.php'), false, 'UTF-8')]
[repositoryDeclaration(c)/]

use Doctrine\ORM\EntityRepository;

/**
 * [c.name.concat('Repository')/]
 */
class [c.name.concat('Repository')/] extends EntityRepository
{
}
[/file]

[/template]

[template public generate(e : Enumeration) post (trim())]
[comment @main/]

[file (e.name.concat('.php'), false, 'UTF-8')]
<?php

namespace [enumNamespace(e)/];

use Fresh\DoctrineEnumBundle\DBAL\Types\AbstractEnumType;

/**
 * [e.name/]
 */
class [e.name/] extends AbstractEnumType
{

[for (p:NamedElement | e.getOwnedMembers()) ]
    const [p.name.toUpper()/] = '[p.name/]';
[/for]

    protected static $choices = ['['/]
    [for (p:NamedElement | e.getOwnedMembers()) ]
        self::[p.name.toUpper()/]    => '[p.name.toUpperFirst()/]',
    [/for]
 [']'/];
}
[/file]

[/template]

[template public entityDocumentDeclaration(c : Class) post(trim())]
<?php

namespace [entityNamespace(c)/];
[/template]

[template public repositoryDeclaration(c : Class) post(trim())]
<?php

namespace [repositoryNamespace(c)/];
[/template]


[template public entityNamespace(c : Class) post (trim())]
[c.getNamespace().name/]\Entity
[/template]

[template public enumNamespace(e : Enumeration) post (trim())]
[e.getNamespace().name/]\Enum
[/template]


[template public repositoryNamespace(c : Class) post (trim())]
[c.getNamespace().name/]\Repository
[/template]


[template public entityUse(c : Class) post (trim()) { used : Boolean = false; }]
use Doctrine\ORM\Mapping as ORM;
use Gedmo\Mapping\Annotation as Gedmo;
use Doctrine\Common\Collections\ArrayCollection;
use JMS\Serializer\Annotation\ExclusionPolicy;
use JMS\Serializer\Annotation\Expose;
use JMS\Serializer\Annotation\Type;
use AWCoreBundle\Entity\Entity;
use Symfony\Component\Validator\Constraints as Assert;
[if (c._package.eAllContents(Enumeration)->notEmpty()) ]
use Fresh\DoctrineEnumBundle\Validator\Constraints as EnumAssert;
[/if]
[if (c.attribute.type.name->exists(s:String|s = 'File'))]
use Symfony\Component\HttpFoundation\File\UploadedFile;
[/if]
[for (e : Enumeration | c._package.eAllContents(Enumeration)) ]
use [enumNamespace(e)/]\[e.name/];
[/for]

[/template]


[template public entityDocumentation(c : Class) post (trim())]

/**
 * [c.name/]
 *
 * @ORM\Table()
 * @ORM\Entity(repositoryClass="[entityRepositoryFQN(c)/]")
[if (c._package.eAllContents(Class).superClass.name->exists(s: String |s = c.name)) ]
 * @ORM\InheritanceType("SINGLE_TABLE")
[/if]
 * @ExclusionPolicy("all")
 */
[/template]


[template public entityFQN(c : Class) post(trim())]
[c.entityNamespace()/]\[c.name/]
[/template]

[template public repositoryFQN(c : Class) post(trim())]
[c.getNamespace().name/]\Repository\[c.name/]
[/template]

[template public enumFQN(c : Class) post(trim())]
[c.getNamespace().name/]\Enum\[c.name/]
[/template]

[template public entityRepositoryFQN(c : Class) post (trim())]
[c.repositoryFQN()/]Repository
[/template]




[template public entityDeclaration(c : Class) post (trim())]
[c.entityAbstract()/]class [c.name/][entityExtends(c)/]
{
[/template]



[template public entityAbstract(c : Class)]
[if (c.isAbstract)]abstract [/if]
[/template]




[template public entityExtends(c : Class)]
[if (not c.superClass->isEmpty())] extends [for (sc : Class | c.superClass) separator (', ')][sc.entityFQN()/][/for][else] extends Entity[/if]
[/template]




[template public entityProperties(c : Class) post(trim())]
[for (p: Property | c.attribute) separator ('\n')]
[let typePHP : String = p.type.name.replaceAll('Integer', 'integer').replaceAll('String', 'string').replaceAll('Boolean', 'boolean').replaceAll('Date', '\\\\DateTime')]
[let typeDoc : String = typePHP.replaceAll('\\\\DateTime', 'datetime').replaceAll('Date', 'datetime')]

/**
[if (not p.type.name.equalsIgnoreCase('virtual')) ]
 * @var [typePHP/]
 * @Type("string")
[if (not p.type.oclAsType(Enumeration).oclIsInvalid())]
 * @EnumAssert\Enum(entity="[typeDoc/]")
[/if]
[if (p.type.name.equalsIgnoreCase('file')) ]
 * @ORM\Column(name="[p.name/]", type="string", length=255, nullable=true)
[else]
 * @ORM\Column(name="[p.name/]", type="[typeDoc/]", nullable=true)
[/if]
[if (p.name.equalsIgnoreCase('id'))]
 * @ORM\Id
 * @ORM\GeneratedValue(strategy="AUTO")
[/if]
[if (p.name.equalsIgnoreCase('createdat') or p.name.equalsIgnoreCase('updatedat'))]
[let typeGedmo : String = p.name.replaceAll('tedAt', 'te')]
 * @Gedmo\Timestampable(on="[typeGedmo/]")
[/let]
[/if]
[else]
 * @var mixed
[/if]
 * @Expose
 */
 [if (p.type.name.equalsIgnoreCase('file')) ]
 [p.visibility/] $[p.name/];
 
 
 /**
  * @Assert\File(maxSize="8192k")
  */
 [p.visibility/] $[p.name.concat('File')/];
[else]
 [p.visibility/] $[p.name/];
[/if]
[/let]
[/let]
[/for]
[/template]




[template public entityAssociations(c : Class) post(trim())]
[for (p : Property | c.getAssociations().navigableOwnedEnd->select((type <> c) or (type = c and opposite.type = c))) separator ('\n')]
	[if (p.opposite.upper.toString().equalsIgnoreCase('1'))]
		[if (p.upper.toString().equalsIgnoreCase('-1'))]
[oneToMany(p)/]
		[else]
[oneToOne(p)/]
		[/if]
	[else]
		[if (p.upper.toString().equalsIgnoreCase('1'))]
[manyToOne(p)/]
		[else]
[manyToMany(p)/]
		[/if]
	[/if]
[/for]
[/template]


[template public oneToMany(p : Property) post(trim())]
/**
 * @var ArrayCollection|[p.type.oclAsType(Class).entityFQN()/]['['/][']'/]
 *
 * @ORM\OneToMany(targetEntity="[p.type.oclAsType(Class).entityFQN()/]", mappedBy="[p.opposite.name/]")
 * @Expose
 */
[p.visibility/] $[p.name/];
[/template]



[template public oneToOne(p : Property) post(trim()) {
	isOwningSide : Boolean = p.eAnnotations.details->select(value.toString().contains('association:owning'))->notEmpty();
	isNullable : Boolean = p.lower.toString().equalsIgnoreCase('0');
}]
/**
 * @var [entityFQN(p.type.oclAsType(Class))/]
 *
 * @ORM\OneToOne(targetEntity="[p.type.oclAsType(Class).entityFQN()/]", [if(isOwningSide)]inversed[else]mapped[/if]By="[p.opposite.name/]"[if (isNullable)], nullable=true[/if])
 * @Expose
 */
[p.visibility/] $[p.name/];
[/template]




[template public manyToOne(p : Property) post(trim())]
/**
 * @var [p.type.oclAsType(Class).entityFQN()/]
 *
 * @ORM\ManyToOne(targetEntity="[p.type.oclAsType(Class).entityFQN()/]", inversedBy="[p.opposite.name/]")
 * @ORM\JoinColumn(onDelete="CASCADE")
 [if (p.name.equalsIgnoreCase('createdby') or p.name.equalsIgnoreCase('updatedby'))]
    [let typeGedmo : String = p.name.replaceAll('tedBy', 'te')]
 * @Gedmo\Blameable(on="[typeGedmo/]")
    [/let]
 [/if]
 */
[p.visibility/] $[p.name/];
[/template]




[template public manyToMany(p : Property) post(trim()) {
	isOwningSide : Boolean = p.eAnnotations.details->select(value.toString().contains('association:owning'))->notEmpty();
}]
/**
 * @var ArrayCollection|[p.type.oclAsType(Class).entityFQN()/]['['/][']'/]
 *
 * @ORM\ManyToMany(targetEntity="[p.type.oclAsType(Class).entityFQN()/]", [if(isOwningSide)]inversed[else]mapped[/if]By="[p.opposite.name/]")
 * @Expose
 */
[p.visibility/] $[p.name/];
[/template]




[template public entityConstruct(c : Class) post(trim())]
/**
 * Constructor
 */
public function __construct()
{
[for (p : Property | c.getAssociations().navigableOwnedEnd->select((type <> c) or (type = c and opposite.type = c)))]
	[if (p.opposite.upper.toString().equalsIgnoreCase('1'))]
		[if (p.upper.toString().equalsIgnoreCase('-1'))]
	$this->[p.name/] = new ArrayCollection();
		[/if]
	[else]
		[if (not p.upper.toString().equalsIgnoreCase('1'))]
	$this->[p.name/] = new ArrayCollection();
		[/if]
	[/if]
[/for]
}
[/template]




[template public entityPropertiesGetSet(c : Class) post (trim())]
[for (p: Property | c.attribute) separator('\n')]

[getterProperty(p, false)/]
[if (not p.name.equalsIgnoreCase('id'))]

[setterProperty(p, false, false)/]
[/if]

[if (p.type.name.equalsIgnoreCase('file')) ]
[uploadFunctions(p)/]
[/if]
[/for]

[if (c.attribute.type.name->exists(s:String|s = 'File'))]
/**
 * Get directory for file uploads
 *
 * @return string
 */
protected function getUploadDir($onlyName = false, $type = '') {
    if (!$onlyName) {
        return WEB_PATH.'/upload/'.$type;
    }
    return '/upload/'.$type;
}
[/if]
[/template]



[template public uploadFunctions(p : Property)]
/**
 * Sets the file used for [p.name/] uploads
 *
 * @param UploadedFile $file
 * @return object
 */
public function set[p.name.toUpperFirst()/]File(UploadedFile $file = null) {
    $this->[p.name/]File = $file;
    if (isset($this->[p.name/])) {
        $this->temp[p.name.toUpperFirst()/] = $this->[p.name/];
        $this->[p.name/] = null;
    }
    return $this;
}

/**
 * Get the file used for [p.name/] uploads
 *
 * @return UploadedFile
 */
public function get[p.name.toUpperFirst()/]File() {

    return $this->[p.name/]File;
}

/**
 * Get the absolute path of the [p.name/]Path
 */
public function get[p.name.toUpperFirst()/]AbsolutePath() {
    return null === $this->[p.name/]
        ? null
        : $this->getUploadDir().'/'.$this->[p.name/];
}

/**
 * Get the web path for the user
 *
 * @return string
 */
public function get[p.name.toUpperFirst()/]Path() {
    return $this->getUploadDir(true).'/'.$this->get[p.name.toUpperFirst()/]();
}

/**
 * @ORM\PrePersist()
 * @ORM\PreUpdate()
 */
public function preUpload[p.name.toUpperFirst()/]() {
    if (null !== $this->get[p.name.toUpperFirst()/]File()) {
        $filename = '[p.name/]_'.$this->getId();
        $this->set[p.name.toUpperFirst()/]($filename.'.'.$this->get[p.name.toUpperFirst()/]File()->guessExtension());
    }
}

/**
 * @ORM\PostPersist()
 * @ORM\PostUpdate()
 *
 * Upload the [p.name.toUpperFirst()/]
 *
 * @return mixed
 */
public function upload[p.name.toUpperFirst()/]() {
    if ($this->get[p.name.toUpperFirst()/]File() === null) {
        return;
    }
    $this->get[p.name.toUpperFirst()/]File()->move($this->getUploadDir(), $this->get[p.name.toUpperFirst()/]Path());

    if (isset($this->temp[p.name.toUpperFirst()/]) && file_exists($this->getUploadDir().'/'.$this->temp[p.name.toUpperFirst()/])) {
        // delete the old file
        unlink($this->getUploadDir().'/'.$this->temp[p.name.toUpperFirst()/]);
        // clear the temp file path
        $this->temp[p.name.toUpperFirst()/] = null;
    }
    $this->[p.name/]File = null;
}

/**
 * @ORM\PostRemove()
 */
public function remove[p.name.toUpperFirst()/]File()
{
    if ($file = $this->get[p.name.toUpperFirst()/]Path() && file_exists($this->get[p.name.toUpperFirst()/]Path())) {
        unlink($file);
    }
}
[/template]


[template public getterProperty(p : Property, isAssociation : Boolean) post (trim())]
[let typePHP : String = p.type.name.replaceAll('Integer', 'integer').replaceAll('String', 'string').replaceAll('Boolean', 'boolean').replaceAll('Date', '\\\\Datetime')]

/**
 * Gets [p.name/]
 * 
 * @return [if (isAssociation)][if (p.isMultivalued())]ArrayCollection|[p.type.oclAsType(Class).entityFQN()/]['['/][']'/][else][entityFQN(p.type.oclAsType(Class))/][/if][else][typePHP/][/if]
 */
public function [if (typePHP.equalsIgnoreCase('boolean'))]is[else]get[/if][p.name.toUpperFirst()/]()
{
	return $this->[p.name/];
}
[/let]
[/template]




[template public setterProperty(p : Property, isAssociation : Boolean, oneTo : Boolean) post (trim())]
[let typePHP : String = p.type.name.replaceAll('Integer', 'integer').replaceAll('String', 'string').replaceAll('Boolean', 'boolean').replaceAll('Date', '\\\\Datetime')]
[let typePHPDec : Set(String) = Set{'integer', 'string', 'boolean'}]
/**
 * Sets [p.name/]
 * 
 * @param [if (isAssociation)][p.type.oclAsType(Class).entityFQN()/][else][typePHP/][/if] $[p.name/]
 * 
 * @return $this
 */
public function set[p.name.toUpperFirst()/]([if (isAssociation)][entityFQN(p.type.oclAsType(Class))/] [elseif (typePHPDec->count(typePHP).toString().equalsIgnoreCase('0'))][typePHP/] [/if]$[p.name/]) 
{
	[if (isAssociation)]
	if($this->get[p.name.toUpperFirst()/]() !== $[p.name/])
	{
		$this->[p.name/] = $[p.name/];
		$[p.name/]->[if (oneTo)]set[p.opposite.name.toUpperFirst()/][else]add[p.opposite.name.substring(1, p.opposite.name.size() - 1).toUpperFirst()/][/if]($this);
	}
	[else]
	$this->[p.name/] = $[p.name/];
	[/if]

	return $this;
}
[/let]
[/let]
[/template]




[template public entityAssociationsAddRemoveGet(c : Class) post (trim())]
[for (p : Property | c.getAssociations().navigableOwnedEnd->select((type <> c) or (type = c and opposite.type = c))) separator ('\n')]
	[if (p.opposite.upper.toString().equalsIgnoreCase('1'))]
		[if (p.upper.toString().equalsIgnoreCase('-1'))]
[getterProperty(p, true)/]

[entityAddAssociation(p, true)/]

[entityRemoveAssociation(p, true)/]
		[else]
[getterProperty(p, true)/]

[setterProperty(p, true, true)/]
		[/if]
	[else]
		[if (p.upper.toString().equalsIgnoreCase('1'))]
[getterProperty(p, true)/]

[setterProperty(p, true, false)/]
		[else]
[getterProperty(p, true)/]

[entityAddAssociation(p, false)/]

[entityRemoveAssociation(p, false)/]
		[/if]
	[/if]
[/for]
[/template]




[template public entityAddAssociation(p : Property, oneTo : Boolean) post (trim()) {
	param : String = p.name.substring(1, p.name.size() - 1);
	typeFQN : String = entityFQN(p.type.oclAsType(Class));
}]
/**
 * Adds [param/]
 *
 * @param [typeFQN/] $[param/]
 *
 * @return boolean
 */
public function add[param.toUpperFirst()/]([typeFQN/] $[param/])
{
	if(!$this->get[p.name.toUpperFirst()/]()->contains($[param/]))
	{
		$this->[p.name/]['['/][']'/] = $[param/];
		$[param/]->[if (oneTo)]set[p.opposite.name.toUpperFirst()/][else]add[p.opposite.name.substring(1, p.opposite.name.size() - 1).toUpperFirst()/][/if]($this);

		return true;
	}

	return false;
}
[/template]




[template public entityRemoveAssociation(p : Property, oneTo : Boolean) post (trim()) {
	param : String = p.name.substring(1, p.name.size() - 1);
	typeFQN : String = entityFQN(p.type.oclAsType(Class));
}]
/**
 * Removes [param/]
 *
 * @param [typeFQN/] $[param/]
 *
 * @return boolean
 */
public function remove[param.toUpperFirst()/]([typeFQN/] $[param/])
{
	if($this->get[p.name.toUpperFirst()/]()->contains($[param/]))
	{
		$this->[p.name/]->removeElement($[param/]);
		[if (not oneTo)]
		$[param/]->remove[p.opposite.name.substring(1, p.opposite.name.size() - 1).toUpperFirst()/]($this);
		[/if]

		return true;
	}

	return false;
}
[/template]
